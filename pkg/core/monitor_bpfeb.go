// Code generated by bpf2go; DO NOT EDIT.
//go:build (mips || mips64 || ppc64 || s390x) && linux

package core

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type monitorProcessMetrics struct {
	Pid          uint32
	Tgid         uint32
	CpuNs        uint64
	RssBytes     uint64
	VmSize       uint64
	StackSize    uint64
	ThreadCount  uint32
	_            [4]byte
	StartTimeNs  uint64
	LastUpdateNs uint64
	CgroupId     uint32
	Comm         [16]int8
	_            [4]byte
}

// loadMonitor returns the embedded CollectionSpec for monitor.
func loadMonitor() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_MonitorBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load monitor: %w", err)
	}

	return spec, err
}

// loadMonitorObjects loads monitor and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*monitorObjects
//	*monitorPrograms
//	*monitorMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadMonitorObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadMonitor()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// monitorSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorSpecs struct {
	monitorProgramSpecs
	monitorMapSpecs
	monitorVariableSpecs
}

// monitorProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorProgramSpecs struct {
	CollectCpuMetrics        *ebpf.ProgramSpec `ebpf:"collect_cpu_metrics"`
	CollectMemoryMetrics     *ebpf.ProgramSpec `ebpf:"collect_memory_metrics"`
	KprobeAccountPageDirtied *ebpf.ProgramSpec `ebpf:"kprobe_account_page_dirtied"`
	TraceMmPageAlloc         *ebpf.ProgramSpec `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree          *ebpf.ProgramSpec `ebpf:"trace_mm_page_free"`
	TraceProcessExec         *ebpf.ProgramSpec `ebpf:"trace_process_exec"`
	TraceProcessExit         *ebpf.ProgramSpec `ebpf:"trace_process_exit"`
	TraceProcessFork         *ebpf.ProgramSpec `ebpf:"trace_process_fork"`
	TraceRssStat             *ebpf.ProgramSpec `ebpf:"trace_rss_stat"`
	TraceSchedSwitch         *ebpf.ProgramSpec `ebpf:"trace_sched_switch"`
}

// monitorMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorMapSpecs struct {
	Events            *ebpf.MapSpec `ebpf:"events"`
	ProcessMetricsMap *ebpf.MapSpec `ebpf:"process_metrics_map"`
	ProcessStartTimes *ebpf.MapSpec `ebpf:"process_start_times"`
	ThreadCountMap    *ebpf.MapSpec `ebpf:"thread_count_map"`
}

// monitorVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type monitorVariableSpecs struct {
}

// monitorObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorObjects struct {
	monitorPrograms
	monitorMaps
	monitorVariables
}

func (o *monitorObjects) Close() error {
	return _MonitorClose(
		&o.monitorPrograms,
		&o.monitorMaps,
	)
}

// monitorMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorMaps struct {
	Events            *ebpf.Map `ebpf:"events"`
	ProcessMetricsMap *ebpf.Map `ebpf:"process_metrics_map"`
	ProcessStartTimes *ebpf.Map `ebpf:"process_start_times"`
	ThreadCountMap    *ebpf.Map `ebpf:"thread_count_map"`
}

func (m *monitorMaps) Close() error {
	return _MonitorClose(
		m.Events,
		m.ProcessMetricsMap,
		m.ProcessStartTimes,
		m.ThreadCountMap,
	)
}

// monitorVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorVariables struct {
}

// monitorPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadMonitorObjects or ebpf.CollectionSpec.LoadAndAssign.
type monitorPrograms struct {
	CollectCpuMetrics        *ebpf.Program `ebpf:"collect_cpu_metrics"`
	CollectMemoryMetrics     *ebpf.Program `ebpf:"collect_memory_metrics"`
	KprobeAccountPageDirtied *ebpf.Program `ebpf:"kprobe_account_page_dirtied"`
	TraceMmPageAlloc         *ebpf.Program `ebpf:"trace_mm_page_alloc"`
	TraceMmPageFree          *ebpf.Program `ebpf:"trace_mm_page_free"`
	TraceProcessExec         *ebpf.Program `ebpf:"trace_process_exec"`
	TraceProcessExit         *ebpf.Program `ebpf:"trace_process_exit"`
	TraceProcessFork         *ebpf.Program `ebpf:"trace_process_fork"`
	TraceRssStat             *ebpf.Program `ebpf:"trace_rss_stat"`
	TraceSchedSwitch         *ebpf.Program `ebpf:"trace_sched_switch"`
}

func (p *monitorPrograms) Close() error {
	return _MonitorClose(
		p.CollectCpuMetrics,
		p.CollectMemoryMetrics,
		p.KprobeAccountPageDirtied,
		p.TraceMmPageAlloc,
		p.TraceMmPageFree,
		p.TraceProcessExec,
		p.TraceProcessExit,
		p.TraceProcessFork,
		p.TraceRssStat,
		p.TraceSchedSwitch,
	)
}

func _MonitorClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed monitor_bpfeb.o
var _MonitorBytes []byte
